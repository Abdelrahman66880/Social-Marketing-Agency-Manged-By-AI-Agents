from typing import Optional, Annotated
from pydantic import BaseModel, Field, ConfigDict, BeforeValidator
from datetime import datetime, timezone

from bson.objectid import ObjectId

# Reusable annotated type for ObjectId fields
PyObjectId = Annotated[str, BeforeValidator(str)]

class Recommendation(BaseModel):
    """Schema for an AI-generated Recommendation document in the database."""
    
    id: Optional[PyObjectId] = Field(None, alias="_id")

    title: str = Field(
        ...,
        min_length=10,
        max_length=100,
        description="Title of the recommendation generated by the AI agent."
    )

    content: str = Field(
        ...,
        min_length=10,
        description="Full text of the recommendation results generated by the AI agent."
    )

    createdAt: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    
    user_id: PyObjectId

    model_config = ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "_id": "671a4b9e2a7d4e8c6f3d91b2",
                "title": "Improving AI-Generated Medical Reports for Accuracy",
                "content": (
                    "This recommendation discusses refining AI-generated medical reports "
                    "by incorporating context-aware natural language models and validation layers."
                ),
                "createdAt": "2025-10-24T10:00:00Z",
                "user_id": "671a4b9e2a7d4e8c6f3d91a9"
            }
        }
    )

    @classmethod
    def get_indexes(cls):
        return [
            {"key": [("user_id", 1)], "name": "user_index", "unique": False},
            {"key": [("createdAt", -1)], "name": "createdAt_index", "unique": False},
        ]
