from typing import Optional, Annotated
from pydantic import BaseModel, Field, ConfigDict, BeforeValidator
from datetime import datetime, timezone
from bson.objectid import ObjectId

from ..enums.AnalysisEnums import AnlaysisType

# Reusable annotated type for ObjectId fields
PyObjectId = Annotated[str, BeforeValidator(str)]

class Analysis(BaseModel):
    """Schema for AI-generated Analysis documents in the database."""

    id: Optional[PyObjectId] = Field(None, alias="_id")

    analysisType: AnlaysisType = Field(
        ...,
        description="Type of analysis, must be either COMPETITOR_ANALYSIS or INTERACTION_ANALYSIS."
    )

    createdAt: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))

    content: str = Field(
        ...,
        min_length=10,
        description="Results generated by the AI model."
    )

    user_id: PyObjectId

    model_config = ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "_id": "671a4b9e2a7d4e8c6f3d91b3",
                "analysisType": "Competitor analysis",
                "createdAt": "2025-10-24T12:00:00Z",
                "content": (
                    "This analysis compares the engagement performance of competitors' "
                    "AI-generated content to identify patterns in audience interaction."
                ),
                "user_id": "671a4b9e2a7d4e8c6f3d91a9"
            }
        }
    )
    
    @classmethod
    def get_indexes(cls):
        return [
            {"key": [("user_id", 1)], "name": "user_index", "unique": False},
            {"key": [("createdAt", -1)], "name": "createdAt_index", "unique": False},
        ]
