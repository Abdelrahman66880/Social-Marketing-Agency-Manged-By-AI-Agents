# facebook_routes.py
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.responses import JSONResponse
from ..models.enums.ResponseSignal import ResponseSignal
from ..models.db_schemas.Post import Post
from ..models.schemas.postSchams import PageInfoSchema, PostUpdateSchema
import requests
import json
import os
from ..helpers.config import get_Settings

facebook_router = APIRouter(
    prefix="/facebook", 
    tags=["Facebook"]
)

"""
Note:
The following endpoint documentation is purely conceptual. 
It is intended to clarify the objectives and expected functionality, 
not to represent the final implementation.
"""


# =======================In Controller =====================================
# There is a difference between page access token that is generated by facebook
#and
# the access token that passed in the code
# ===========================================================================

def get_facebook_page_access_token(user_access_token: str):
    """
    Given a user access token, retrieve the Facebook Page Access Token.

    Input:
    - user_access_token (str): The user's access token.

    Output:
    - page_id (str): The ID of the Facebook page.
    - page_access_token (str): The access token for the Facebook page.
    """
    url = f"https://graph.facebook.com/v23.0/me/accounts"
    params = {
        "access_token": user_access_token
    }
    response = requests.get(url, params=params).json()
    if "data" in response and len(response["data"]) > 0:
        page_info = response["data"][0] #to pick the first page (we assumed that each user has only one bussins page)
        page_id = page_info["id"]
        page_token = page_info["access_token"]
        print("======================================================================")
        print(page_token)
        print("=======================================================================")
        return page_token
    return None
        
# ==========================================================================

@facebook_router.post("/upload_post")
def upload_post(page_id: str, page_Access_Token: str):
    """
    Upload a new post to a Facebook page.

    Input:
    - page_id (str): ID of the Facebook page.
    - post (PostSchema): Pydantic model containing post details.

    Output:
    - Reture dict contain the postid <PAGEID_POSTID>.
    """
    
    url = f"https://graph.facebook.com/v23.0/{page_id}/feed"
    payload = {
        "message": "Hello from AI Agent again ðŸš€",
        "access_token": page_Access_Token
    }
    
    response = requests.post(url, data=payload)
    result = response.json()
    return result


@facebook_router.get("/page_info", response_model=PageInfoSchema)
def get_page_info(page_id: str, page_access_token: str):
    url = f"https://graph.facebook.com/v23.0/{page_id}"
    params = {
        "fields": "id,name,about,description,category,category_list,website",
        "access_token": page_access_token
    }
    response = requests.get(url, params=params).json()
    if "error" in response:
        raise HTTPException(status_code=400, detail=response["error"])
    return response

@facebook_router.post("/update_post")
def update_post(post_id: str, page_access_token: str, update_data: PostUpdateSchema):
    """
    Update an existing post on a Facebook page.

    Input:
    - post_id (str): ID of the post to update.
    - page_access_token (str): Page access token with correct permissions.
    - update_data (PostUpdateSchema): Fields to update (e.g., message, link).

    Output:
    - Confirmation of the update.
    """
    url = f"https://graph.facebook.com/v23.0/{post_id}"
    payload = update_data.dict(exclude_unset=True)
    payload["access_token"] = page_access_token

    response = requests.post(url, data=payload)
    result = response.json()

    if response.status_code != 200 or not result.get("success"):
        raise HTTPException(status_code=response.status_code, detail=result)

    return {
        "success": True,
        "updated_fields": update_data.dict(exclude_unset=True)
    }




@facebook_router.post("/reply_for_message")
def reply_for_message():
    """
    Reply to a specific chat message in a pageâ€™s inbox.

    Input:
    - page_id (str): ID of the Facebook page.
    - chat_id (str): ID of the chat thread.
    - reply (str): AI-generated reply message.

    Output:
    - Confirmation of the reply (e.g., message ID, status).
    """
    return


@facebook_router.post("/reply_for_comment")
def reply_for_comment():
    """
    Reply to a specific comment on a post.

    Input:
    - page_id (str): ID of the Facebook page.
    - comment_id (str): ID of the comment to reply to.
    - reply (str): Reply text, typically generated based on post rules and global page rules.

    Output:
    - Confirmation of the reply (e.g., reply ID, status).
    """
    return


@facebook_router.get("/search_for_pages")
def search_for_pages():
    """
    Search for competitor Facebook pages by keyword.

    Input:
    - keywords (List[str]): Keywords to search with.
    - limit (int, optional): Maximum number of pages to return.

    Output:
    - List of matching pages with relevant metadata.
    """
    return


@facebook_router.get("/get_chat_history")
def get_chat_history():
    """
    Retrieve the chat history of a specific conversation.

    Input:
    - page_id (str): ID of the Facebook page.
    - chat_id (str): ID of the chat thread.

    Output:
    - List of messages in the conversation, formatted for AI processing.
    """
    return


@facebook_router.get("/get_page_interactions")
def get_page_interactions():
    """
    Retrieve all interactions (comments, likes, etc.) across all posts on a page.

    Input:
    - page_id (str): ID of the Facebook page.

    Output:
    - List of interactions with metadata (user, type, timestamp, etc.).
    """
    return
